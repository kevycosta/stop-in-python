datasource db {
  // could be postgresql or mysql
  provider = "sqlite"
  url      = "file:dev.db"
}

generator db {
  provider             = "prisma-client-py"
  interface            = "sync"
  recursive_type_depth = 5
}

model mdUsers {
  user_id       String @id @default(cuid())
  user_name     String
  user_login    String
  user_password String

  dcQuestionsTransactions dcQuestionsTransactions[]
  dcRoomStatus            dcRoomStatus[]
  mdRooms                 mdRooms[]
}

model mdRooms {
  room_id    Int    @id @default(autoincrement())
  user_admin String

  dcQuestionsTransactions dcQuestionsTransactions[]
  mdQuestions             mdQuestions[]
  dcRoomRound             dcRoomRound[]
  userAdm                 mdUsers                   @relation(fields: [user_admin], references: [user_id])
}

model dcRoomStatus {
  room_id    Int
  user_id    String @id
  user_score Int    @default(0)

  user mdUsers @relation(fields: [user_id], references: [user_id])
}

model dcRoomRound {
  room_id       Int @id
  current_round Int @default(0)

  room mdRooms @relation(fields: [room_id], references: [room_id])
}

model mdQuestions {
  question_id    Int    @id @default(autoincrement())
  room_id        Int
  question_title String

  rooms                   mdRooms                   @relation(fields: [room_id], references: [room_id])
  dcQuestionsTransactions dcQuestionsTransactions[]
}

model dcQuestionsTransactions {
  transaction_id  Int     @id @default(autoincrement())
  question_id     Int
  user_id         String
  room_id         Int
  round           Int
  letter_in_round String
  question_value  String?
  question_votes  Int

  user     mdUsers     @relation(fields: [user_id], references: [user_id])
  rooms    mdRooms     @relation(fields: [room_id], references: [room_id])
  question mdQuestions @relation(fields: [question_id], references: [question_id])
}
